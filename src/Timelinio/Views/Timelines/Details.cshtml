@model Timelinio.Models.Timeline

@{
    ViewData["Title"] = "Details";
}

<div class="page-header">
    <h2>@Model.Title</h2>
    <h4 class="">Timeline Details</h4>
</div>

<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Focus)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Focus.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.BeginDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.BeginDate)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.EndDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.EndDate)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Events)
        </dt>
        <dd>
            <table class="table" id="events-table">
                <tr>
                    <th>Event Name</th>
                    <th>Event Date</th>
                    <th>Event Description</th>
                    <th></th>
                </tr>
                @foreach (var item in Model.Events)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                            <span class="glyphicon glyphicon-phone" data-id=@item.EventID aria-hidden="true"></span>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Date)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            <span class="eventDeleter btn-danger" id="@item.EventID">Delete</span>
                            <span class="eventEditor btn-danger" id="@(item.EventID)edit">Edit</span>
                        </td>
                    </tr>
                }
            </table>
        </dd>
    </dl>
</div>
<div>
    @Html.Partial("EventForm.cshtml", new Timelinio.Models.Event { TimelineID = Model.TimelineID })
</div>
<div>
    <a asp-action="Edit" asp-route-id="@(Model.TimelineID)event">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>

<div class="hidden" id="confirmationBox">
    
</div>

<script>
    document.addEventListener('DOMContentLoaded', detailsPageScripts, false);
    function detailsPageScripts() {
        var confirmationBox = document.getElementById("confirmationBox");
        var eventDeleters = document.getElementsByClassName("eventDeleter");
        for (i = 0; i < eventDeleters.length; i++) {
            eventDeleters[i].addEventListener('click', loadDeleteConfirm, false);
        }
        function loadDeleteConfirm() {
            this.setAttribute("data", "deletionCandidate");
            console.log(this);

            var url = "../../Events/Delete/" + parseInt(this.id);
            var http_request = new XMLHttpRequest();
            try {
                // Opera 8.0+, Firefox, Chrome, Safari
                http_request = new XMLHttpRequest();
            } catch (e) {
                // Internet Explorer Browsers
                try {
                    http_request = new ActiveXObject("Msxml2.XMLHTTP");

                } catch (e) {

                    try {
                        http_request = new ActiveXObject("Microsoft.XMLHTTP");
                    } catch (e) {
                        // Something went wrong
                        alert("Your browser broke!");
                        return false;
                    }

                }
            }

            http_request.onreadystatechange = function () {

                if (http_request.readyState == 4) {
                    // Javascript function JSON.parse to parse JSON data
                    var deleteConfirmPartial = http_request.responseText;
                    //alert("success");
                    //console.log(url);
                    //console.log(deleteConfirmPartial);
                    confirmationBox.className = "";
                    confirmationBox.innerHTML = deleteConfirmPartial;
                }
            }

            http_request.open("GET", url, true);
            //http_request.responseType = 'html';
            http_request.send();

        }

        var eventEditors = document.getElementsByClassName("eventEditor");
        for (i = 0; i < eventEditors.length; i++) {
            eventEditors[i].addEventListener('click', loadEdit, false);
        }
        function loadEdit() {
            //alert(this.getAttribute('id'));
            var r = new XMLHttpRequest();
            r.open("GET", "../../events/edit/" + parseInt(this.getAttribute('id')), true);
            r.onreadystatechange = function () {
                if (r.readyState != 4 || r.status != 200) return;
                confirmationBox.className = "";
                confirmationBox.innerHTML = r.responseText;
            };
            r.send("a=1&b=2&c=3");

        }

        document.addEventListener('click', function (e) {
            var row;
            if (e.target && e.target.id == 'deleteConfirm') {
                var r = new XMLHttpRequest();
                r.open("POST", "../../events/delete/" + document.getElementById('deleteConfirm').value, true);
                r.onreadystatechange = function () {
                    if (r.readyState != 4 || r.status != 200) return;
                    confirmationBox.innerHTML = r.responseText;
                };
                r.send();
            }
            if (e.target && e.target.id == 'editSave') {
                e.preventDefault();
                var xmlHttp;
                //Let us create the XML http object  
                xmlHttp = null;

                if (window.XMLHttpRequest) {
                    //for new browsers  
                    xmlHttp = new XMLHttpRequest();
                }
                else if (window.ActiveXObject) {
                    //for old ones  
                    //xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");  
                    var strName = "Msxml2.XMLHTTP"
                    if (navigator.appVersion.indexOf("MSIE 5.5") >= 0) {
                        strName = "Microsoft.XMLHTTP"
                    }
                    try {
                        xmlHttp = new ActiveXObject(strName);
                    }
                    catch (e) {
                        alert("Error. Scripting for ActiveX might be disabled")
                        return false;
                    }
                }

                if (xmlHttp != null) {
                    //Handle the response of this async request we just made(subscribe to callback)  
                    //xmlHttp.onreadystatechange = state_Change;  
                    var userName = "manasm";

                    xmlHttp.onreadystatechange = function () {
                        alert(xmlHttp.readyState);
                        if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
                            confirmationBox.innerHTML = xmlHttp.responseText;
                        }
                    }

                    //Pass the value to a web page on server as query string using XMLHttpObject.  
                    xmlHttp.open("POST", "../../Events/Edit/" + parseInt(document.getElementById("editSave").getAttribute("value")), true);
                    //var parameters = "userName=XXX";  
                    xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                    console.log(document.getElementById("editEventDate").getAttribute("value"));
                    xmlHttp.send("Title=" + document.getElementById("editEventTitle").value + "&Description=" + document.getElementById("editEventDescription").value + "&Date=" + document.getElementById("editEventDate").value);
                }
                //console.log(document.getElementById("EventID").getAttribute("value"));
                //r.send("EventID=" + document.getElementById("EventID").getAttribute("value") +
                //        "&Title=" + document.getElementById("Title").getAttribute("value") +
                //        "&Date=" + document.getElementById("Date").getAttribute("value") +
                //        "&Description=" + document.getElementById("Description").getAttribute("value") +
                //        "&TimelineID=" + document.getElementById("TimelineID").getAttribute("value"));
                //r.send("&Title=" + document.getElementById("Title").getAttribute("value") +
                //        "&Description=" + document.getElementById("Description").getAttribute("value"));
            }

            if (e.target && ((e.target.id == 'deleteDismiss' || e.target.id == 'deleteConfirmDismiss') || e.target.id == 'editDismiss')) {
                confirmationBox.className = "hidden";
                confirmationBox.innerHTML = "";
                if (e.target.id == "deleteConfirmDismiss") {
                    var deletersToFindIndex = document.getElementsByClassName('eventDeleter');
                    for (i = 0; i < deletersToFindIndex.length; i++) {
                        if (deletersToFindIndex[i].getAttribute("data") === "deletionCandidate") {
                            var rowToDelete = document.getElementsByTagName("tr")[i + 1];
                            rowToDelete.remove();
                            break;
                        }
                    }
                } else if (e.target.id == "deleteDismiss") {
                    var deletersToFindToRemoveData = document.getElementsByClassName('eventDeleter');
            
                    for (i = 0; i < deletersToFindToRemoveData.length; i++) {
                        if (deletersToFindToRemoveData[i].getAttribute("data") === "deletionCandidate") deletersToFindToRemoveData[i].removeAttribute("data");
                    }
                }
            }

            if (e.target && e.target.className == "glyphicon glyphicon-phone") {
                alert("I am so happy");
                var eventId = e.target.getAttribute('data-id');
                var r = new XMLHttpRequest();
                r.open("GET", "../../events/sendeventtext/" + eventId, true);
                r.onreadystatechange = function () {
                    if (r.readyState != 4 || r.status != 200) return;
                    //console.log(r.responseText);
                    confirmationBox.className = "";
                    confirmationBox.innerHTML = r.responseText;
                };
                r.send();

            }
        });// end of document delegated binding

    }
    
</script>